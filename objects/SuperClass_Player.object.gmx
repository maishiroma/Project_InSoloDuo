<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///All variables for the player

//Currently active variables (default to MALE)
grav = 0.3;
hsp = 0;
vsp = 0;
jumpSpeed = 8;
moveSpeed = 4;

//default variables for male
mGrav = 0.3;
mJumpSpeed = 8;
mMoveSpeed = 4;
mDashSpeed = 10;

//default variables for female
fGrav = 0.25;
fJumpSpeed = 10;
fMoveSpeed = 2;
fOneProjectile = false;

//Shared Variables between genders
maxHP = 4;
hp = 4;
grounded = false;
inviniFrames = false;
clearedLevel = false;
offScreened = false;
hitStun = 10;
direc = 1;
spawnX = x;
spawnY = y;
key_down = 0;
hsp_carry = 0;  //for moving platforms
isMale = true;  //All games MUST have the male be spawned FIRST!
dead = false;   //Disables actions when dying
dyingAnimate = false; 
deadTicker = 160;   //For animating death
cantSkip = false;   //For level cheat

sActionPerform = false;
sCoolDownMode = false;
sAttackState = false;
sCoolDuration = 75; //Length of cooldown
sMoveDuration = 20; //Length of move
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>The Gender Bar</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>721</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_health</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Starts death animation
dyingAnimate = true;
audio_play_sound(sd_loseLife,3,false);
instance_create(view_xview + 240,view_yview + 330,obj_died);
alarm[1] = 160;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respawning after death
with(obj_died){
    instance_destroy();
}
room_restart();
instance_activate_all();
audio_play_sound(obj_BGM.current_BGM,10,true);
script_execute(scr_resetPlayerValues,self,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turning off invincibility frames
inviniFrames = false;
hitStun = 10;
image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles ALL movement and collisions!

//Handle player input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_down = keyboard_check(vk_down);
key_jump = keyboard_check_pressed(vk_space);
key_A = keyboard_check(ord("A"));
key_S = keyboard_check(ord("S"));
image_speed = 0.2;

//Check if you lost a life via hp loss or falling off
if((hp &lt; 1 || offScreened == true) &amp;&amp; dead == false){
    script_execute(scr_playerLoseLife,self);
}

if(dead == false){
    //Hit stun
    if(inviniFrames == false || (hitStun &lt;= 1 &amp;&amp; inviniFrames == true) ){
        move = key_left + key_right;
    }
    else{
        move = 0;
        key_jump = 0;
    }
    
    //Walking animation
    if(isMale == true){
        if(move == 1){
            sprite_index = spr_maleWalk;
            image_xscale = 1;
        }
        else if(move == -1){
            sprite_index = spr_maleWalk;
            image_xscale = -1;
        }
    }
    else{
        if(move == 1){
            sprite_index = spr_femaleWalk;
            image_xscale = 1;
        }
        else if(move == -1){
            sprite_index = spr_femaleWalk;
            image_xscale = -1;
        }
    }
    
    //Basic movement
    hsp = move * moveSpeed;
    if(hsp &gt; 0){
        direc = 1;
    }
    else if(hsp &lt; 0){
        direc = -1;
    }
    
    if(vsp &lt; 10){   
        vsp += grav;    
    }
    if(place_meeting(x,y+1,SuperClass_FloorWall)){
        if(key_jump == 1){
            vsp = -jumpSpeed;
            grounded = false;
            GUI.canPause = false;
            audio_play_sound(sd_jump,1,false);
        }
    }
    
    //Jump animation
    if(isMale == true){
        if(grounded == false &amp;&amp; direc == 1){
            sprite_index = spr_maleJump;
            image_xscale = 1;
        }
        else if(grounded == false &amp;&amp; direc == -1){
            sprite_index = spr_maleJump;
            image_xscale = -1;
        }
    }
    else{
        if(grounded == false &amp;&amp; direc == 1){
            sprite_index = spr_femaleJump;
            image_xscale = 1;
        }
        else if(grounded ==false &amp;&amp; direc == -1){
            sprite_index = spr_femaleJump;
            image_xscale = -1;
        }
    }
        
    //This temporary variable helps solve moving platform problems
    var hsp_final = hsp + hsp_carry;
    hsp_carry = 0;
    
    //Special Gender Actions
    if(sCoolDownMode == false){
        if(isMale == true){ //Male actions
             //Dash Action
            if(key_A == 1 &amp;&amp; move != 0){
                hsp_final = move * mDashSpeed;
                sprite_index = spr_maleRun;
                if(move == -1){  image_xscale = -1; }
                sActionPerform = true;
            }
            //Shoulder Attack
            else if(key_S == 1 &amp;&amp; move != 0){
                sprite_index = spr_maleCharge;
                if(move == -1){ image_xscale = -1;  }
                sAttackState = true;
                sActionPerform = true;
            }
        }
        else{   
            //female actions
            //Twirl Action
            if(key_A == 1 &amp;&amp; move != 0){
                sprite_index = spr_femaleTwirl;
                if(move == -1){  image_xscale = -1; }
                sActionPerform = true;
                sAttackState = true;
                //if in midair, adds in a weak midair jump!
                if(grounded == false &amp;&amp; vsp != 0){
                    vsp = -0.5;
                }
            }
            //Hadoken Attack
            else if(fOneProjectile == false &amp;&amp; key_S == 1 &amp;&amp; move != 0){
                sprite_index = spr_femaleShoot;
                if(move == -1){ image_xscale = -1;  }
                if(move == 1){
                    with instance_create(x,y, obj_energyBall){
                        direction = 0;
                        speed = 7;
                    }
                }
                else if(move == -1){
                    with instance_create(x,y, obj_energyBall){
                        direction = 180;
                        speed = 7;
                        image_xscale = -1;
                    }
                }
                fOneProjectile = true;
                sActionPerform = true;
            }
        }
    }
    
    //Knockback from getting hit
    if(inviniFrames == true &amp;&amp; hitStun &gt; 0){
        hitStun -= 1;
        hsp_final = (sign(direc) * -10) + hsp_final;
    }
    
    //Horizontal Collision Handeling and Slope Collision
    if(place_meeting(x+hsp_final,y,SuperClass_FloorWall)){
        hsp_final = script_execute(scr_HorizontalColission,self,hsp_final);
    }
    x += hsp_final;
    
    //Vertical Collision Handeling
    if(place_meeting(x,y+vsp,SuperClass_FloorWall)){
       vsp = script_execute(scr_VerticalCollision,self,vsp);
    }
    y += vsp;
    
    //Checks if you are on the ground
    script_execute(scr_grounded,self);
        
    //Special Move CoolDown
    script_execute(scr_specialMoveCooldown,self);
   
}
else{
   script_execute(scr_playerDyingAnimated,self);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_checkPoint">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change player spawn to the flag
spawnX = other.flagX;
spawnY = other.flagY;

with(other){
    if(image_index != 1){
        audio_play_sound(sd_checkPoint,2,false);
        image_index = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_outOfBounds">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Falling off the level
offScreened = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level Cheat. Skips to progression door.

if(cantSkip == false){
    if(object_exists(obj_SuperDoor)){
        SuperClass_Player.x = obj_SuperDoor.x;
        SuperClass_Player.y = obj_SuperDoor.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
