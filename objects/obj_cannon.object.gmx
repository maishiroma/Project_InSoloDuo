<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cannon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>SuperClass_FloorWall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declaring variables, what type of cannon it is, which way it shoots
image_speed = 0;

//by default, the cannon shoots balls. To make it shoor fire, set isBall to false in creation code!
isBall = true;
dir = -1; //faces to the left by default
speedOfShot = 5; //speed of the cannon shot;

bulletTicker = 40;  //default. Same as a normal bullet. Edit this in creation code
flameTicker = 30;   //drfault. Same as flame. Edit this in creation code. 
shotFired = false; //controls if the cannon already shot it's predetermined amount of balls
delayBetweenShots = 120; //The amount of time it takes to shoot another round
fireDelay = 60; //default value, time when fire is turned off per round
noLoop = false; //for a test in the fire
triggerSwitchCannon = false; //Determins if the cannon is controlled by a switch
countDown = delayBetweenShots;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///This tells the cannon to stops hooting fire
shotFired = true;
alarm[0] = delayBetweenShots;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sets the can fire back to normal
shotFired = false;
noLoop = false;
countDown = delayBetweenShots;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Behavior of cannon
if(triggerSwitchCannon == false){
    //if the cannon isn't on a switch activation aka not endless
    if(isBall == true){
        if(shotFired == false){
            image_index = 1;
            if(dir == -1){  
                image_xscale = 1;
                with instance_create(x-12,y,obj_enemyProjectile){
                   speed = other.dir * other.speedOfShot;
                   direction = other.dir;
                    image_xscale = -1;
                   ticker = other.bulletTicker;
                }
            }
            else if(dir == 1){  
                image_xscale = -1;
                with instance_create(x+15,y,obj_enemyProjectile){
                   speed = other.speedOfShot;
                   direction = other.dir;
                   ticker = other.bulletTicker;
                }
            }
            shotFired = true;
            alarm[0] = delayBetweenShots;
            }
        
        else{
            image_index = 0;
            countDown--;
            if(countDown &lt; 35){
                image_index = 1;
            }
        }
    }
    else{
        //To control how far the fire goes, place a gimmickWall in a good position in front of the cannon
        if(shotFired == false){
            image_index = 1;
            if(dir == -1){  
                image_xscale = 1;
                with instance_create(x - 11,y,obj_fire){
                    speed = other.dir * other.speedOfShot;
                    direction = other.dir;
                    image_angle = other.dir * 270;
                    ticker = other.flameTicker;
                }
            }
            else if(dir == 1){  
                image_xscale = -1;
                with instance_create(x + 11,y,obj_fire){
                    speed = other.speedOfShot;
                    direction = other.dir;
                    image_angle = 270;
                    ticker = other.flameTicker;
                }
            }
            //Duration of the shot before it turns off
            if(noLoop == false){
                noLoop = true;
                alarm[1] = fireDelay;
            }
        }
         else{
            image_index = 0;
            countDown--;
            if(countDown &lt; 35){
                image_index = 1;
            }
        }
    }
}

else{
    //if it is, the cannon is always firing until it's turned off. Optimally a flame cannon for best results
    if(global.active == false){
        if(isBall == true){
            //Causes a barrage of shots with small gaps in between
            if(shotFired == false){
                image_index = 1;
                if(dir == -1){  
                    image_xscale = 1;
                    with instance_create(x-10,y,obj_enemyProjectile){
                        speed = other.dir * other.speedOfShot;
                        direction = other.dir;
                        ticker = other.bulletTicker;
                    }
                }
                else if(dir == 1){  
                    image_xscale = -1;
                    with instance_create(x+15,y,obj_enemyProjectile){
                        speed = other.speedOfShot;
                        direction = other.dir;
                        ticker = other.bulletTicker;
                    }
                }
                shotFired = true;
                alarm[0] = 20;
                }
            }
            else{
            //a horizontal endless beam of flames
                image_index = 1;
                if(dir == -1){  
                    image_xscale = 1;
                    with instance_create(x - 11,y,obj_fire){
                        speed = other.dir * other.speedOfShot;
                        direction = other.dir;
                        image_angle = other.dir * 270;
                        ticker = other.flameTicker;
                    }
                }
                else if(dir == 1){  
                    image_xscale = -1;
                    with instance_create(x + 11,y,obj_fire){
                        speed = other.speedOfShot;
                        direction = other.dir;
                        image_angle = 270;
                        ticker = other.flameTicker;
                    } 
                }
            }
        }
    else{
        image_index = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
